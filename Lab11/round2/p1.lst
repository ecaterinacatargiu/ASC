     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  %include "factorial.asm"
     1                              <1> %ifndef _FACTORIAL_ASM_
     2                              <1> %define _FACTORIAL_ASM_
     3                              <1> 
     4                              <1> ;factorial(n) -> n!
     5                              <1> factorial:
     6 00000000 55                  <1>     push ebp
     7 00000001 89E5                <1>     mov ebp, esp 
     8 00000003 B801000000          <1>     mov eax, 1
     9 00000008 8B4D08              <1>     mov ecx, [ebp+8]
    10                              <1>     repeat: 
    11 0000000B F7E1                <1>         mul ecx
    12 0000000D E2FC                <1>         loop repeat
    13 0000000F 5D                  <1>     pop ebp
    14 00000010 C20400              <1>     ret 4; stdcall convention
    15                              <1>     
    16                              <1> %endif
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000013 256400                      format db "%d",0
    16 00000016 00000000                    n dd 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;scanf(format, n)
    22 00000000 68[16000000]                    push n 
    23 00000005 68[13000000]                    push format
    24 0000000A FF15[00000000]                  call [scanf]
    25 00000010 83C408                          add esp, 4*2
    26                                          ;factorial(n)
    27 00000013 FF35[16000000]                  push dword [n]
    28 00000019 E8(00000000)                    call factorial
    29                                          ;printf(format, eax)
    30 0000001E 50                              push eax
    31 0000001F 68[13000000]                    push format
    32 00000024 FF15[00000000]                  call [printf]
    33 0000002A 83C408                          add esp, 4*2
    34                                          
    35                                      
    36                                          ; exit(0)
    37 0000002D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 0000002F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
