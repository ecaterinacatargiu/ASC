     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 07563412153C2B1A            s dd 12345607h, 1A2B3C15h
    15                                      lens equ ($-s)/4
    16                                      lend equ lens*4
    17 00000008 00<rept>                    d times lend db 0
    18                                  
    19                                  ; our code starts here
    20                                  ;Given an array S of doublewords, build the array of bytes D formed from bytes of doublewords sorted as unsigned numbers in descending order.
    21                                  ;Example:
    22                                   ;s DD 12345607h, 1A2B3C15h
    23                                   ;d DB 56h, 3Ch, 34h, 2Bh, 1Ah, 15h, 12h, 07h
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                      
    28                                          ; exit(0)
    29 00000000 B908000000                      mov ecx, lend;ecx - length of d
    30 00000005 E323                            jecxz sfarsit
    31 00000007 BE[00000000]                    mov esi, s;esi - offset s
    32                                          sortstring:
    33 0000000C AC                                  lodsb   ;Al = <DS:ESI> inc esi
    34 0000000D 51                                  push ecx ;save ecx
    35 0000000E BB[08000000]                        mov ebx, d;ebx-offset d
    36 00000013 BF[00000000]                        mov edi, s;edi-offset s
    37 00000018 B908000000                          mov ecx, lend;ecx - length of d
    38                                              compare:
    39 0000001D AE                                      scasb;compare al with <es:edi> inc edi
    40 0000001E 7301                                    jae skip ;if diff is pozitive skip al is bigger
    41 00000020 43                                      inc ebx;diff negative al is smaller than <es:edi>
    42                                                  skip
    42          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    43 00000021 E2FA                                loop compare
    44 00000023 59                                  pop ecx;back ecx
    45 00000024 4E                                  dec esi;decrease esi by 1
    46 00000025 89DF                                mov edi, ebx;moving edi the offset of d
    47 00000027 A4                                  movsb;<ES:EDI> = <DS:ESI> inc edi, inc esi
    48 00000028 E2E2                            loop sortstring
    49                                          sfarsit
    49          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    50 0000002A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000002C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
