     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen, fprintf, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fclose msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 616E612E74787400            file_name db "ana.txt",0
    16 00000008 7700                        access_mode db "w",0
    17 0000000A 00000000                    fd dd 0
    18 0000000E 25642000                    format db "%d ",0
    19 00000012 0100000002000000EF-         a dd 1,2,-17,9
    19 0000001B FFFFFF09000000     
    20                                      len EQU ($-a)/4
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ;1 - open the file : fopen(file_name, access_mode)
    26 00000000 68[08000000]                    push access_mode
    27 00000005 68[00000000]                    push file_name
    28 0000000A FF15[00000000]                  call [fopen]
    29 00000010 83C408                          add esp, 4*2
    30                                          ;EAX=fd
    31 00000013 A3[0A000000]                    mov [fd], eax
    32                                          ;here we check if the fopen failed
    33 00000018 83F800                          cmp eax,0
    34 0000001B 7436                            je final
    35                                          
    36                                          ;2 - write into file: fprintf(fd, format, eax)
    37 0000001D B904000000                      mov ecx, len
    38 00000022 E32F                            jecxz final
    39 00000024 BE[12000000]                    mov esi, a
    40 00000029 FC                              cld
    41                                          do:
    42 0000002A AD                                  lodsd
    43 0000002B 60                                  pusha
    44 0000002C 50                                  push eax
    45 0000002D 68[0E000000]                        push format
    46 00000032 FF35[0A000000]                      push dword [fd]
    47 00000038 FF15[00000000]                      call [fprintf]
    48 0000003E 83C40C                              add esp, 4*3
    49 00000041 61                                  popa ;restore all the registers
    50 00000042 E2E6                                loop do
    51                                          ;3 - close the file : fclose(fd)
    52 00000044 FF35[0A000000]                   push dword [fd]
    53 0000004A FF15[00000000]                   call [fclose]
    54 00000050 83C404                           add esp, 4*1
    55                                           
    56                                           final:
    57                                          
    58                                      
    59                                          ; exit(0)
    60 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
